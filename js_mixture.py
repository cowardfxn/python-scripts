#!/usr/bin/python
# encoding: utf-8

'''
混淆后的js代码恢复函数

'''

import re, math
x="return@orders@addEventListener@Sat@@26@0@__jsl_clearance@replace@location@w@05@2@Mar@Array@DOMContentLoaded@g@catch@7@setTimeout@3@07@9@Expires@954@href@false@e@attachEvent@hJS@D@while@GMT@Path@KgYg@l@try@onreadystatechange@captcha@__phantomas@m@cd@1457176046@window@challenge@i@12@join@if@dc@charAt@16@6@z@vKx@cookie@function@var@length@else@for@1500@document@_phantom"
x = re.sub(r'\@*$',"", x).split("@")
y="1h A=1g(){w(13.1n||13.E){};1h 11,19='8=12.p|7|';1h 2=[(-~{}+[]+[])+[-~!{}+((-~{}<<-~{}))*[(-~{}<<-~{})]],(n+[[], []+[[]][(+[])]][~~{}]),(l+[]+[]),[-~{}+(-~{}+[-~(((+!![])|(-~{}<<-~{})))]>>-~{})],(-~{}+[]+[])+(~~[]+[]+[[]][(+[])]),(-~{}+[]+[])+(l+[]+[]),(-~{}+[]+[])+(1c+[[], []+[[]][(+[])]][~~{}]),(1c+[[], []+[[]][(+[])]][~~{}]),[j],[-~!{}+((-~{}<<-~{}))*[(-~{}<<-~{})]],(-~{}+[]+[])+(-~{}+[]+[]),(~~[]+[]+[[]][(+[])]),[(-~{}-~{}<<-~{})],(d+[]),(-~{}+[]+[])+(d+[]),(-~{}+[]+[]),(-~{}+[]+[])+[(-~{}-~{}<<-~{})]];11=f(2.1i);1k(1h 15=7;15<2.1i;15++){11[2[15]]=[(l+[]+[]),(~~[]+[]+[[]][(+[])])+[-~!{}+((-~{}<<-~{}))*[(-~{}<<-~{})]],(~~[]/~~[]+[[]][(+[])]).1a(-~-~~~{}),'u','h',(~~[]+[]+[[]][(+[])])+[-~{}+(-~{}+[-~(((+!![])|(-~{}<<-~{})))]>>-~{})],'v','b',(n+[[], []+[[]][(+[])]][~~{}])+((((+!![])|(-~{}<<-~{})))/~~![]+[]).1a(-~-~~~{})+[(((+!![])|(-~{}<<-~{})))/~~![]+[]+[]][7].1a(j)+[-~!{}+((-~{}<<-~{}))*[(-~{}<<-~{})]],[j]+[{}+[[], []+[[]][(+[])]][~~{}]][7].1a(((+!![])|(-~{}<<-~{}))),[!{}+[]][7].1a(-~{}),'1e','1d','10','z',[[][(-~{}-~{}<<-~{}-~{})]+[]+[[]][(+[])]][7].1a(([-~{}-~{}]+~~[]>>-~{}-~{})),'%'][15]};11=11.17('');19+=11;k('a.q=a.q.9(/[\\?|&]D-14/,\\'\\')',1l);1m.1f=(19+';o=4, c-e-1b 16:m:6 x;y=/;');};18((1g(){B{1 !!13.3;}i(s){1 r;}})()){1m.3('g',A,r);}1j{1m.t('C',A);}"
z=0
def f(x,y=None):
    a, b, c = 0, 0, 0
    bs = []
    x = list(x)
    y = y or 99;
    cnt = 0
    for a in x:
        b = ord(a[0])-77.5
        if b:
            tc = 0
            if math.fabs(b) < 13:
                tc = b + 48.5
            else:
                tc = int(a, 36)
            c = tc + y * c
        else:
            break
    return c

g = sorted(re.findall(r'\b\w+\b', y),key=lambda x: f(x)).pop()
z = 1
while (f(g,z) - len(x)):
    z += 1

t = re.sub(r'\b\w+\b', lambda y: x[int(f(y.group(),z)-1)], y)
print(t)
